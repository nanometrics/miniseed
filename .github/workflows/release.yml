name: Release
on:
  push:
    tags: '*'
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up Java with OSSRH
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - id: version
        name: Get version
        run: echo "version=$(mvn --no-transfer-progress --batch-mode help:evaluate -Dexpression=project.version | grep -v INFO)" >> $GITHUB_OUTPUT
      - id: check-not-snapshot
        name: Fail if is a snapshot
        run: |
          if [[ ${{ steps.version.outputs.version }} == *-SNAPSHOT ]]; then
            echo "Version ${{ steps.version.outputs.version }} is a snapshot"
            exit 1
          fi
      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - name: Deploy to OSSRH Maven Central
        run: |
          mvn --no-transfer-progress --batch-mode \
          -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
          -Prelease deploy -pl :miniseed-parent,:miniseed
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
  build-msx:
    runs-on: ${{ matrix.os }}
    needs: publish
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - uses: actions/checkout@v3
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Set up GraalVM Native Image toolchain
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.1'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: build msx
        run: mvn --no-transfer-progress --batch-mode verify
      - name: build tgz
        run: tar cvzf msx/target/deploy/msx-${{ matrix.os }}.tgz -C msx/target/deploy/ msx*
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: msx-${{ matrix.os }}
          path: msx/target/deploy/msx-${{ matrix.os }}.tgz
  release:
    runs-on: ubuntu-latest
    needs: build-msx
    steps:
      - name: Download linux artifact
        uses: actions/download-artifact@v2
        with:
          name: msx-ubuntu-latest
          path: msx/target/deploy/msx-ubuntu-latest.tgz
      - name: Download macos artifact
        uses: actions/download-artifact@v2
        with:
          name: msx-macos-latest
          path: msx/target/deploy/msx-macos-latest.tgz
      - name: Download windows artifact
        uses: actions/download-artifact@v2
        with:
          name: msx-macos-latest
          path: msx/target/deploy/msx-windows-latest.tgz
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: msx-ubuntu-latest
          path: msx/target/deploy/msx
      - uses: actions/checkout@v3
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            msx/target/deploy/msx-ubuntu-latest.tgz
            msx/target/deploy/msx-macos-latest.tgz
            msx/target/deploy/msx-windows-latest.tgz
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: false
          prerelease: false
